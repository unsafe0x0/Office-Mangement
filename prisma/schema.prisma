generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  REMOTE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ForWhom {
  ALL
  EMPLOYEE
  ADMIN
}

model Admin {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  profilePicture String?
  email          String   @unique
  password       String
  role           String?  @default("ADMIN")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Employee {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  password       String
  role           String?   @default("EMPLOYEE")
  position       String?
  department     String?
  phone          String?
  address        String?
  dateOfJoining  DateTime?
  dateOfBirth    DateTime?
  profilePicture String?
  salary         Float?
  isActive       Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attendance Attendance[]
  leaves     Leave[]
  payrolls   Payroll[]
}

model Attendance {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee         @relation(fields: [employeeId], references: [id])
  employeeId String
  date       DateTime
  status     AttendanceStatus
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Leave {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee    @relation(fields: [employeeId], references: [id])
  employeeId String
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     LeaveStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Payroll {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  month      String
  year       Int
  basicPay   Float
  bonus      Float?   @default(0)
  deductions Float?   @default(0)
  netPay     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  employeeIds String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  forWhom   ForWhom  @default(ALL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
